{
  "address": "0xC1610677A3161f51e660d08D7aeD3120556256bf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_balanceOf",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockedEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "_tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "output",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "humanize",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xbdbc3161b7cbe0e5e75a119aada00b01f9fe10265bc4a1e37b6636e0cb1c3f98",
  "receipt": {
    "to": null,
    "from": "0x53f3B51FD7F327E1Ec4E6eAa3A049149cB2acaD2",
    "contractAddress": "0xC1610677A3161f51e660d08D7aeD3120556256bf",
    "transactionIndex": 2,
    "gasUsed": "5692068",
    "logsBloom": "0x
    "blockHash": "0xe5f02837771890a67642471001745d4201dbbf7d5d478825abbaf3c643b06944",
    "transactionHash": "0xbdbc3161b7cbe0e5e75a119aada00b01f9fe10265bc4a1e37b6636e0cb1c3f98",
    "logs": [],
    "blockNumber": 62235009,
    "cumulativeGasUsed": "5939060",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "2fb576a6f6f472b73989d9f7f6cb81ea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"_tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"output\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"humanize\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VeArtProxy.sol\":\"VeArtProxy\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363736373539313939383838\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/VeArtProxy.sol\":{\"content\":\"// pragma solidity 0.8.13;\\n\\n// import {Base64} from \\\"contracts/libraries/Base64.sol\\\";\\n// import {IVeArtProxy} from \\\"contracts/interfaces/IVeArtProxy.sol\\\";\\n\\n// contract VeArtProxy is IVeArtProxy {\\n//     function toString(uint value) internal pure returns (string memory) {\\n//         // Inspired by OraclizeAPI's implementation - MIT license\\n//         // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n//         if (value == 0) {\\n//             return \\\"0\\\";\\n//         }\\n//         uint temp = value;\\n//         uint digits;\\n//         while (temp != 0) {\\n//             digits++;\\n//             temp /= 10;\\n//         }\\n//         bytes memory buffer = new bytes(digits);\\n//         while (value != 0) {\\n//             digits -= 1;\\n//             buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\\n//             value /= 10;\\n//         }\\n//         return string(buffer);\\n//     }\\n\\n//     function _tokenURI(uint _tokenId, uint _balanceOf, uint _locked_end, uint _value) external pure returns (string memory output) {\\n//         output = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"><style>.base { fill: white; font-family: serif; font-size: 14px; }</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"black\\\" /><text x=\\\"10\\\" y=\\\"20\\\" class=\\\"base\\\">';\\n//         output = string(abi.encodePacked(output, \\\"token \\\", toString(_tokenId), '</text><text x=\\\"10\\\" y=\\\"40\\\" class=\\\"base\\\">'));\\n//         output = string(abi.encodePacked(output, \\\"balanceOf \\\", toString(_balanceOf), '</text><text x=\\\"10\\\" y=\\\"60\\\" class=\\\"base\\\">'));\\n//         output = string(abi.encodePacked(output, \\\"locked_end \\\", toString(_locked_end), '</text><text x=\\\"10\\\" y=\\\"80\\\" class=\\\"base\\\">'));\\n//         output = string(abi.encodePacked(output, \\\"value \\\", toString(_value), '</text></svg>'));\\n\\n//         string memory json = Base64.encode(bytes(string(abi.encodePacked('{\\\"name\\\": \\\"lock #', toString(_tokenId), '\\\", \\\"description\\\": \\\"Velocimeter locks, can be used to boost gauge yields, vote on token emission, and receive bribes\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\\\"}'))));\\n//         output = string(abi.encodePacked('data:application/json;base64,', json));\\n//     }\\n// }\\n\\npragma solidity 0.8.13;\\n\\nimport {Base64} from \\\"contracts/libraries/Base64.sol\\\";\\nimport {IVeArtProxy} from \\\"contracts/interfaces/IVeArtProxy.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\\\";\\n\\ncontract VeArtProxy is IVeArtProxy {\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT license\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function humanize(uint256 value) public pure returns (string memory) {\\n        if (value < 1000) {\\n            return toString(value);\\n        }\\n        uint256 exp = Math.min(Math.log10(value) / 3, 5);\\n        string[6] memory units = [\\\"k\\\", \\\"M\\\", \\\"B\\\", \\\"T\\\", \\\"Q\\\", \\\"QQ\\\"];\\n        uint256 scaled = value / (10 ** (exp * 3));\\n        return string(abi.encodePacked(toString(scaled), units[exp - 1]));\\n    }\\n\\n    function _tokenURI(uint256 _tokenId, uint256 _balanceOf, uint256 _lockedEnd, uint256 _value)\\n        external\\n        pure\\n        returns (string memory output)\\n    {\\n        output =\\n            '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"><style>.base { fill: white; font-family: serif; font-size: 14px; }</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"black\\\" /><text x=\\\"10\\\" y=\\\"20\\\" class=\\\"base\\\">';\\n        output =\\n            string(abi.encodePacked(output, \\\"token \\\", toString(_tokenId), '</text><text x=\\\"10\\\" y=\\\"40\\\" class=\\\"base\\\">'));\\n        output = string(\\n            abi.encodePacked(output, \\\"balanceOf \\\", humanize(_balanceOf), '</text><text x=\\\"10\\\" y=\\\"60\\\" class=\\\"base\\\">')\\n        );\\n        output = string(\\n            abi.encodePacked(output, \\\"lockedEnd \\\", humanize(_lockedEnd), '</text><text x=\\\"10\\\" y=\\\"80\\\" class=\\\"base\\\">')\\n        );\\n        output = string(abi.encodePacked(output, \\\"value \\\", humanize(_value), \\\"</text></svg>\\\"));\\n\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\": \\\"lock #',\\n                        toString(_tokenId),\\n                        '\\\", \\\"description\\\": \\\"Velocimeter locks, can be used to boost gauge yields, vote on token emission, and receive bribes\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                        Base64.encode(bytes(output)),\\n                        '\\\"}'\\n                    )\\n                )\\n            )\\n        );\\n        output = string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n    }\\n}\\n\",\"keccak256\":\"0xc8c0d5c33966aa498eafe60c51cca0c650b6f3e334df298d8506ae9a9ac0d089\"},\"contracts/interfaces/IVeArtProxy.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\ninterface IVeArtProxy {\\n    function _tokenURI(uint _tokenId, uint _balanceOf, uint _locked_end, uint _value) external pure returns (string memory output);\\n}\\n\",\"keccak256\":\"0x7526ce7cd114e4cc6db67dcfe4687876a9fefb91a69ec42cdaa4491b57467142\"},\"contracts/libraries/Base64.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\\n\",\"keccak256\":\"0x55535e1e0a14bbac370fe5f25df23aa88c678b915af53517672130f9a54f7e3e\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3546b156d97633f7f8cad536d5454c81d1d604687c02b2eb105fdc33cb962b41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610dce806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632b3596291461003b578063dd9ec14914610064575b600080fd5b61004e61004936600461066f565b610077565b60405161005b91906106b8565b60405180910390f35b61004e6100723660046106eb565b6101d5565b60606103e88210156100925761008c8261030c565b92915050565b60006100b360036100a285610415565b6100ac9190610749565b60056104ed565b6040805161010081018252600160c08201818152606b60f81b60e0840152825282518084018452818152604d60f81b6020828101919091528084019190915283518085018552828152602160f91b818301528385015283518085018552828152601560fa1b81830152606084015283518085018552918252605160f81b82820152608083019190915282518084019093526002835261515160f01b9083015260a0810191909152909150600061016a83600361075d565b61017590600a610860565b61017f9086610749565b905061018a8161030c565b8261019660018661086c565b600681106101a6576101a6610883565b60200201516040516020016101bc929190610899565b6040516020818303038152906040529350505050919050565b606060405180610120016040528060fd8152602001610c5c60fd91399050806101fd8661030c565b60405160200161020e9291906108c8565b60405160208183030381529060405290508061022985610077565b60405160200161023a929190610944565b60405160208183030381529060405290508061025584610077565b6040516020016102669291906109c4565b60405160208183030381529060405290508061028183610077565b604051602001610292929190610a44565b604051602081830303815290604052905060006102df6102b18761030c565b6102ba84610505565b6040516020016102cb929190610a9f565b604051602081830303815290604052610505565b9050806040516020016102f29190610bbb565b604051602081830303815290604052915050949350505050565b6060816000036103335750506040805180820190915260018152600360fc1b602082015290565b8160005b811561035d578061034781610c00565b91506103569050600a83610749565b9150610337565b60008167ffffffffffffffff81111561037857610378610c19565b6040519080825280601f01601f1916602001820160405280156103a2576020820181803683370190505b5090505b841561040d576103b760018361086c565b91506103c4600a86610c2f565b6103cf906030610c43565b60f81b8183815181106103e4576103e4610883565b60200101906001600160f81b031916908160001a905350610406600a86610749565b94506103a6565b949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106104545772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610480576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061049e57662386f26fc10000830492506010015b6305f5e10083106104b6576305f5e100830492506008015b61271083106104ca57612710830492506004015b606483106104dc576064830492506002015b600a831061008c5760010192915050565b60008183106104fc57816104fe565b825b9392505050565b80516060906000819003610529575050604080516020810190915260008152919050565b60006003610538836002610c43565b6105429190610749565b61054d90600461075d565b9050600061055c826020610c43565b67ffffffffffffffff81111561057457610574610c19565b6040519080825280601f01601f19166020018201604052801561059e576020820181803683370190505b5090506000604051806060016040528060408152602001610d59604091399050600181016020830160005b8681101561062a576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b8352600490920191016105c9565b506003860660018114610644576002811461065557610661565b613d3d60f01b600119830152610661565b603d60f81b6000198301525b505050918152949350505050565b60006020828403121561068157600080fd5b5035919050565b60005b838110156106a357818101518382015260200161068b565b838111156106b2576000848401525b50505050565b60208152600082518060208401526106d7816040850160208701610688565b601f01601f19169190910160400192915050565b6000806000806080858703121561070157600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000826107585761075861071d565b500490565b600081600019048311821515161561077757610777610733565b500290565b600181815b808511156107b757816000190482111561079d5761079d610733565b808516156107aa57918102915b93841c9390800290610781565b509250929050565b6000826107ce5750600161008c565b816107db5750600061008c565b81600181146107f157600281146107fb57610817565b600191505061008c565b60ff84111561080c5761080c610733565b50506001821b61008c565b5060208310610133831016604e8410600b841016171561083a575081810a61008c565b610844838361077c565b806000190482111561085857610858610733565b029392505050565b60006104fe83836107bf565b60008282101561087e5761087e610733565b500390565b634e487b7160e01b600052603260045260246000fd5b600083516108ab818460208801610688565b8351908301906108bf818360208801610688565b01949350505050565b600083516108da818460208801610688565b6503a37b5b2b7160d51b90830190815283516108fd816006840160208801610688565b7f3c2f746578743e3c7465787420783d2231302220793d2234302220636c61737360069290910191820152671e913130b9b2911f60c11b6026820152602e01949350505050565b60008351610956818460208801610688565b6903130b630b731b2a7b3160b51b908301908152835161097d81600a840160208801610688565b7f3c2f746578743e3c7465787420783d2231302220793d2236302220636c617373600a9290910191820152671e913130b9b2911f60c11b602a820152603201949350505050565b600083516109d6818460208801610688565b6903637b1b5b2b222b732160b51b90830190815283516109fd81600a840160208801610688565b7f3c2f746578743e3c7465787420783d2231302220793d2238302220636c617373600a9290910191820152671e913130b9b2911f60c11b602a820152603201949350505050565b60008351610a56818460208801610688565b6503b30b63ab2960d51b9083019081528351610a79816006840160208801610688565b6c1e17ba32bc3a1f1e17b9bb339f60991b60069290910191820152601301949350505050565b6f7b226e616d65223a20226c6f636b202360801b81528251600090610acb816010850160208801610688565b7f222c20226465736372697074696f6e223a202256656c6f63696d65746572206c6010918401918201527f6f636b732c2063616e206265207573656420746f20626f6f737420676175676560308201527f207969656c64732c20766f7465206f6e20746f6b656e20656d697373696f6e2c60508201527f20616e64207265636569766520627269626573222c2022696d616765223a202260708201527f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000060908201528351610ba08160aa840160208801610688565b61227d60f01b60aa929091019182015260ac01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251610bf381601d850160208701610688565b91909101601d0192915050565b600060018201610c1257610c12610733565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600082610c3e57610c3e61071d565b500690565b60008219821115610c5657610c56610733565b50019056fe3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722207072657365727665417370656374526174696f3d22784d696e594d696e206d656574222076696577426f783d223020302033353020333530223e3c7374796c653e2e62617365207b2066696c6c3a2077686974653b20666f6e742d66616d696c793a2073657269663b20666f6e742d73697a653a20313470783b207d3c2f7374796c653e3c726563742077696474683d223130302522206865696768743d2231303025222066696c6c3d22626c61636b22202f3e3c7465787420783d2231302220793d2232302220636c6173733d2262617365223e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212202b3c07a62c9ee407e5ba4010397523f28acbba93689bab98a35a8cc2148e747164736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80632b3596291461003b578063dd9ec14914610064575b600080fd5b61004e61004936600461066f565b610077565b60405161005b91906106b8565b60405180910390f35b61004e6100723660046106eb565b6101d5565b60606103e88210156100925761008c8261030c565b92915050565b60006100b360036100a285610415565b6100ac9190610749565b60056104ed565b6040805161010081018252600160c08201818152606b60f81b60e0840152825282518084018452818152604d60f81b6020828101919091528084019190915283518085018552828152602160f91b818301528385015283518085018552828152601560fa1b81830152606084015283518085018552918252605160f81b82820152608083019190915282518084019093526002835261515160f01b9083015260a0810191909152909150600061016a83600361075d565b61017590600a610860565b61017f9086610749565b905061018a8161030c565b8261019660018661086c565b600681106101a6576101a6610883565b60200201516040516020016101bc929190610899565b6040516020818303038152906040529350505050919050565b606060405180610120016040528060fd8152602001610c5c60fd91399050806101fd8661030c565b60405160200161020e9291906108c8565b60405160208183030381529060405290508061022985610077565b60405160200161023a929190610944565b60405160208183030381529060405290508061025584610077565b6040516020016102669291906109c4565b60405160208183030381529060405290508061028183610077565b604051602001610292929190610a44565b604051602081830303815290604052905060006102df6102b18761030c565b6102ba84610505565b6040516020016102cb929190610a9f565b604051602081830303815290604052610505565b9050806040516020016102f29190610bbb565b604051602081830303815290604052915050949350505050565b6060816000036103335750506040805180820190915260018152600360fc1b602082015290565b8160005b811561035d578061034781610c00565b91506103569050600a83610749565b9150610337565b60008167ffffffffffffffff81111561037857610378610c19565b6040519080825280601f01601f1916602001820160405280156103a2576020820181803683370190505b5090505b841561040d576103b760018361086c565b91506103c4600a86610c2f565b6103cf906030610c43565b60f81b8183815181106103e4576103e4610883565b60200101906001600160f81b031916908160001a905350610406600a86610749565b94506103a6565b949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106104545772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610480576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061049e57662386f26fc10000830492506010015b6305f5e10083106104b6576305f5e100830492506008015b61271083106104ca57612710830492506004015b606483106104dc576064830492506002015b600a831061008c5760010192915050565b60008183106104fc57816104fe565b825b9392505050565b80516060906000819003610529575050604080516020810190915260008152919050565b60006003610538836002610c43565b6105429190610749565b61054d90600461075d565b9050600061055c826020610c43565b67ffffffffffffffff81111561057457610574610c19565b6040519080825280601f01601f19166020018201604052801561059e576020820181803683370190505b5090506000604051806060016040528060408152602001610d59604091399050600181016020830160005b8681101561062a576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b8352600490920191016105c9565b506003860660018114610644576002811461065557610661565b613d3d60f01b600119830152610661565b603d60f81b6000198301525b505050918152949350505050565b60006020828403121561068157600080fd5b5035919050565b60005b838110156106a357818101518382015260200161068b565b838111156106b2576000848401525b50505050565b60208152600082518060208401526106d7816040850160208701610688565b601f01601f19169190910160400192915050565b6000806000806080858703121561070157600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000826107585761075861071d565b500490565b600081600019048311821515161561077757610777610733565b500290565b600181815b808511156107b757816000190482111561079d5761079d610733565b808516156107aa57918102915b93841c9390800290610781565b509250929050565b6000826107ce5750600161008c565b816107db5750600061008c565b81600181146107f157600281146107fb57610817565b600191505061008c565b60ff84111561080c5761080c610733565b50506001821b61008c565b5060208310610133831016604e8410600b841016171561083a575081810a61008c565b610844838361077c565b806000190482111561085857610858610733565b029392505050565b60006104fe83836107bf565b60008282101561087e5761087e610733565b500390565b634e487b7160e01b600052603260045260246000fd5b600083516108ab818460208801610688565b8351908301906108bf818360208801610688565b01949350505050565b600083516108da818460208801610688565b6503a37b5b2b7160d51b90830190815283516108fd816006840160208801610688565b7f3c2f746578743e3c7465787420783d2231302220793d2234302220636c61737360069290910191820152671e913130b9b2911f60c11b6026820152602e01949350505050565b60008351610956818460208801610688565b6903130b630b731b2a7b3160b51b908301908152835161097d81600a840160208801610688565b7f3c2f746578743e3c7465787420783d2231302220793d2236302220636c617373600a9290910191820152671e913130b9b2911f60c11b602a820152603201949350505050565b600083516109d6818460208801610688565b6903637b1b5b2b222b732160b51b90830190815283516109fd81600a840160208801610688565b7f3c2f746578743e3c7465787420783d2231302220793d2238302220636c617373600a9290910191820152671e913130b9b2911f60c11b602a820152603201949350505050565b60008351610a56818460208801610688565b6503b30b63ab2960d51b9083019081528351610a79816006840160208801610688565b6c1e17ba32bc3a1f1e17b9bb339f60991b60069290910191820152601301949350505050565b6f7b226e616d65223a20226c6f636b202360801b81528251600090610acb816010850160208801610688565b7f222c20226465736372697074696f6e223a202256656c6f63696d65746572206c6010918401918201527f6f636b732c2063616e206265207573656420746f20626f6f737420676175676560308201527f207969656c64732c20766f7465206f6e20746f6b656e20656d697373696f6e2c60508201527f20616e64207265636569766520627269626573222c2022696d616765223a202260708201527f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000060908201528351610ba08160aa840160208801610688565b61227d60f01b60aa929091019182015260ac01949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251610bf381601d850160208701610688565b91909101601d0192915050565b600060018201610c1257610c12610733565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600082610c3e57610c3e61071d565b500690565b60008219821115610c5657610c56610733565b50019056fe3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722207072657365727665417370656374526174696f3d22784d696e594d696e206d656574222076696577426f783d223020302033353020333530223e3c7374796c653e2e62617365207b2066696c6c3a2077686974653b20666f6e742d66616d696c793a2073657269663b20666f6e742d73697a653a20313470783b207d3c2f7374796c653e3c726563742077696474683d223130302522206865696768743d2231303025222066696c6c3d22626c61636b22202f3e3c7465787420783d2231302220793d2232302220636c6173733d2262617365223e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212202b3c07a62c9ee407e5ba4010397523f28acbba93689bab98a35a8cc2148e747164736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}