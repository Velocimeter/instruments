{"compiler":{"version":"0.8.13+commit.abaa5c0e"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address[]","name":"allowedRewards","type":"address[]"}],"name":"createExternalBribe","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"allowedRewards","type":"address[]"}],"name":"createInternalBribe","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"last_external_bribe","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"last_internal_bribe","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"contracts/factories/BribeFactory.sol":"BribeFactory"},"evmVersion":"london","libraries":{":__CACHE_BREAKER__":"0x0000000000000031363736343730343737303032"},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"contracts/ExternalBribe.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\";\n\nimport \"contracts/interfaces/IBribe.sol\";\nimport \"contracts/interfaces/IERC20.sol\";\nimport \"contracts/interfaces/IGauge.sol\";\nimport \"contracts/interfaces/IVoter.sol\";\nimport \"contracts/interfaces/IVotingEscrow.sol\";\nimport \"contracts/interfaces/ITurnstile.sol\";\n\n// Bribes pay out rewards for a given pool based on the votes that were received from the user (goes hand in hand with Voter.vote())\ncontract ExternalBribe is IBribe {\n    address internal multisig = 0x0a178469E3d08BEAA0a289E416Ab924F10807989;\n    address internal turnstile = 0xEcf044C5B4b867CFda001101c617eCd347095B44;\n    address public immutable voter; // only voter can modify balances (since it only happens on vote())\n    address public immutable _ve; // \u5929\u4f7f\u306e\u305f\u307e\u3054\n\n    uint256 internal constant DURATION = 7 days; // rewards are released over the voting period\n    uint256 internal constant MAX_REWARD_TOKENS = 16;\n\n    uint256 internal constant PRECISION = 10**18;\n\n    uint256 public totalSupply;\n    mapping(uint256 => uint256) public balanceOf;\n    mapping(address => mapping(uint256 => uint256)) public tokenRewardsPerEpoch;\n    mapping(address => uint256) public periodFinish;\n    mapping(address => mapping(uint256 => uint256)) public lastEarn;\n\n    address[] public rewards;\n    mapping(address => bool) public isReward;\n\n    /// @notice A checkpoint for marking balance\n    struct Checkpoint {\n        uint256 timestamp;\n        uint256 balanceOf;\n    }\n\n    /// @notice A checkpoint for marking supply\n    struct SupplyCheckpoint {\n        uint256 timestamp;\n        uint256 supply;\n    }\n\n    /// @notice A record of balance checkpoints for each account, by index\n    mapping(uint256 => mapping(uint256 => Checkpoint)) public checkpoints;\n    /// @notice The number of checkpoints for each account\n    mapping(uint256 => uint256) public numCheckpoints;\n    /// @notice A record of balance checkpoints for each token, by index\n    mapping(uint256 => SupplyCheckpoint) public supplyCheckpoints;\n    /// @notice The number of checkpoints\n    uint256 public supplyNumCheckpoints;\n\n    event Deposit(address indexed from, uint256 tokenId, uint256 amount);\n    event Withdraw(address indexed from, uint256 tokenId, uint256 amount);\n    event NotifyReward(\n        address indexed from,\n        address indexed reward,\n        uint256 epoch,\n        uint256 amount\n    );\n    event ClaimRewards(\n        address indexed from,\n        address indexed reward,\n        uint256 amount\n    );\n\n    constructor(address _voter, address[] memory _allowedRewardTokens) {\n        voter = _voter;\n        _ve = IVoter(_voter)._ve();\n\n        for (uint256 i; i < _allowedRewardTokens.length; i++) {\n            if (_allowedRewardTokens[i] != address(0)) {\n                isReward[_allowedRewardTokens[i]] = true;\n                rewards.push(_allowedRewardTokens[i]);\n            }\n        }\n\n        ITurnstile(turnstile).register(multisig);\n    }\n\n    // simple re-entrancy check\n    uint256 internal _unlocked = 1;\n    modifier lock() {\n        require(_unlocked == 1);\n        _unlocked = 2;\n        _;\n        _unlocked = 1;\n    }\n\n    function _bribeStart(uint256 timestamp) internal pure returns (uint256) {\n        return timestamp - (timestamp % (7 days));\n    }\n\n    function getEpochStart(uint256 timestamp) public pure returns (uint256) {\n        uint256 bribeStart = _bribeStart(timestamp);\n        uint256 bribeEnd = bribeStart + DURATION;\n        return timestamp < bribeEnd ? bribeStart : bribeStart + 7 days;\n    }\n\n    /**\n     * @notice Determine the prior balance for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param tokenId The token of the NFT to check\n     * @param timestamp The timestamp to get the balance at\n     * @return The balance the account had as of the given block\n     */\n    function getPriorBalanceIndex(uint256 tokenId, uint256 timestamp)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 nCheckpoints = numCheckpoints[tokenId];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n        // First check most recent balance\n        if (checkpoints[tokenId][nCheckpoints - 1].timestamp <= timestamp) {\n            return (nCheckpoints - 1);\n        }\n        // Next check implicit zero balance\n        if (checkpoints[tokenId][0].timestamp > timestamp) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[tokenId][center];\n            if (cp.timestamp == timestamp) {\n                return center;\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return lower;\n    }\n\n    function getPriorSupplyIndex(uint256 timestamp)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 nCheckpoints = supplyNumCheckpoints;\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (supplyCheckpoints[nCheckpoints - 1].timestamp <= timestamp) {\n            return (nCheckpoints - 1);\n        }\n\n        // Next check implicit zero balance\n        if (supplyCheckpoints[0].timestamp > timestamp) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            SupplyCheckpoint memory cp = supplyCheckpoints[center];\n            if (cp.timestamp == timestamp) {\n                return center;\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return lower;\n    }\n\n    function _writeCheckpoint(uint256 tokenId, uint256 balance) internal {\n        uint256 _timestamp = block.timestamp;\n        uint256 _nCheckPoints = numCheckpoints[tokenId];\n        if (\n            _nCheckPoints > 0 &&\n            checkpoints[tokenId][_nCheckPoints - 1].timestamp == _timestamp\n        ) {\n            checkpoints[tokenId][_nCheckPoints - 1].balanceOf = balance;\n        } else {\n            checkpoints[tokenId][_nCheckPoints] = Checkpoint(\n                _timestamp,\n                balance\n            );\n            numCheckpoints[tokenId] = _nCheckPoints + 1;\n        }\n    }\n\n    function _writeSupplyCheckpoint() internal {\n        uint256 _nCheckPoints = supplyNumCheckpoints;\n        uint256 _timestamp = block.timestamp;\n\n        if (\n            _nCheckPoints > 0 &&\n            supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp\n        ) {\n            supplyCheckpoints[_nCheckPoints - 1].supply = totalSupply;\n        } else {\n            supplyCheckpoints[_nCheckPoints] = SupplyCheckpoint(\n                _timestamp,\n                totalSupply\n            );\n            supplyNumCheckpoints = _nCheckPoints + 1;\n        }\n    }\n\n    function rewardsListLength() external view returns (uint256) {\n        return rewards.length;\n    }\n\n    // returns the last time the reward was modified or periodFinish if the reward has ended\n    function lastTimeRewardApplicable(address token)\n        public\n        view\n        returns (uint256)\n    {\n        return Math.min(block.timestamp, periodFinish[token]);\n    }\n\n    // allows a user to claim rewards for a given token\n    function getReward(uint256 tokenId, address[] memory tokens) external lock {\n        require(IVotingEscrow(_ve).isApprovedOrOwner(msg.sender, tokenId));\n        for (uint256 i = 0; i < tokens.length; i++) {\n            uint256 _reward = earned(tokens[i], tokenId);\n            lastEarn[tokens[i]][tokenId] = block.timestamp;\n            if (_reward > 0) _safeTransfer(tokens[i], msg.sender, _reward);\n\n            emit ClaimRewards(msg.sender, tokens[i], _reward);\n        }\n    }\n\n    // used by Voter to allow batched reward claims\n    function getRewardForOwner(uint256 tokenId, address[] memory tokens)\n        external\n        lock\n    {\n        require(msg.sender == voter);\n        address _owner = IVotingEscrow(_ve).ownerOf(tokenId);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            uint256 _reward = earned(tokens[i], tokenId);\n            lastEarn[tokens[i]][tokenId] = block.timestamp;\n            if (_reward > 0) _safeTransfer(tokens[i], _owner, _reward);\n\n            emit ClaimRewards(_owner, tokens[i], _reward);\n        }\n    }\n\n    function earned(address token, uint256 tokenId)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _startTimestamp = lastEarn[token][tokenId];\n        if (numCheckpoints[tokenId] == 0) {\n            return 0;\n        }\n\n        uint256 _startIndex = getPriorBalanceIndex(tokenId, _startTimestamp);\n        uint256 _endIndex = numCheckpoints[tokenId] - 1;\n\n        uint256 reward = 0;\n        // you only earn once per epoch (after it's over)\n        Checkpoint memory prevRewards; // reuse struct to avoid stack too deep\n        prevRewards.timestamp = _bribeStart(_startTimestamp);\n        uint256 _prevSupply = 1;\n\n        if (_endIndex > 0) {\n            for (uint256 i = _startIndex; i <= _endIndex - 1; i++) {\n                Checkpoint memory cp0 = checkpoints[tokenId][i];\n                uint256 _nextEpochStart = _bribeStart(cp0.timestamp);\n                // check that you've earned it\n                // this won't happen until a week has passed\n                if (_nextEpochStart > prevRewards.timestamp) {\n                    reward += prevRewards.balanceOf;\n                }\n\n                prevRewards.timestamp = _nextEpochStart;\n                _prevSupply = supplyCheckpoints[\n                    getPriorSupplyIndex(_nextEpochStart + DURATION)\n                ].supply;\n                prevRewards.balanceOf =\n                    (cp0.balanceOf *\n                        tokenRewardsPerEpoch[token][_nextEpochStart]) /\n                    _prevSupply;\n            }\n        }\n\n        Checkpoint memory cp = checkpoints[tokenId][_endIndex];\n        uint256 _lastEpochStart = _bribeStart(cp.timestamp);\n        uint256 _lastEpochEnd = _lastEpochStart + DURATION;\n\n        if (block.timestamp > _lastEpochEnd) {\n            reward +=\n                (cp.balanceOf * tokenRewardsPerEpoch[token][_lastEpochStart]) /\n                supplyCheckpoints[getPriorSupplyIndex(_lastEpochEnd)].supply;\n        }\n\n        return reward;\n    }\n\n    // This is an external function, but internal notation is used since it can only be called \"internally\" from Gauges\n    function _deposit(uint256 amount, uint256 tokenId) external {\n        require(msg.sender == voter);\n\n        totalSupply += amount;\n        balanceOf[tokenId] += amount;\n\n        _writeCheckpoint(tokenId, balanceOf[tokenId]);\n        _writeSupplyCheckpoint();\n\n        emit Deposit(msg.sender, tokenId, amount);\n    }\n\n    function _withdraw(uint256 amount, uint256 tokenId) external {\n        require(msg.sender == voter);\n\n        totalSupply -= amount;\n        balanceOf[tokenId] -= amount;\n\n        _writeCheckpoint(tokenId, balanceOf[tokenId]);\n        _writeSupplyCheckpoint();\n\n        emit Withdraw(msg.sender, tokenId, amount);\n    }\n\n    function left(address token) external view returns (uint256) {\n        uint256 adjustedTstamp = getEpochStart(block.timestamp);\n        return tokenRewardsPerEpoch[token][adjustedTstamp];\n    }\n\n    function notifyRewardAmount(address token, uint256 amount) external lock {\n        require(amount > 0);\n        if (!isReward[token]) {\n            require(\n                IVoter(voter).isWhitelisted(token),\n                \"bribe tokens must be whitelisted\"\n            );\n            require(\n                rewards.length < MAX_REWARD_TOKENS,\n                \"too many rewards tokens\"\n            );\n        }\n        // bribes kick in at the start of next bribe period\n        uint256 adjustedTstamp = getEpochStart(block.timestamp);\n        uint256 epochRewards = tokenRewardsPerEpoch[token][adjustedTstamp];\n\n        _safeTransferFrom(token, msg.sender, address(this), amount);\n        tokenRewardsPerEpoch[token][adjustedTstamp] = epochRewards + amount;\n\n        periodFinish[token] = adjustedTstamp + DURATION;\n\n        if (!isReward[token]) {\n            isReward[token] = true;\n            rewards.push(token);\n        }\n\n        emit NotifyReward(msg.sender, token, adjustedTstamp, amount);\n    }\n\n    function swapOutRewardToken(\n        uint256 i,\n        address oldToken,\n        address newToken\n    ) external {\n        require(msg.sender == IVotingEscrow(_ve).team(), \"only team\");\n        require(rewards[i] == oldToken);\n        isReward[oldToken] = false;\n        isReward[newToken] = true;\n        rewards[i] = newToken;\n    }\n\n    function _safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0);\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\n    }\n\n    function _safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0);\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(\n                IERC20.transferFrom.selector,\n                from,\n                to,\n                value\n            )\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\n    }\n}\n","keccak256":"0xca2f77876c2b9b0745bd54ac91716a02640bbafa181b2a9811aab3d5c2893503","license":"MIT"},"contracts/InternalBribe.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\";\nimport \"contracts/interfaces/IBribe.sol\";\nimport \"contracts/interfaces/IERC20.sol\";\nimport \"contracts/interfaces/IVoter.sol\";\nimport \"contracts/interfaces/IVotingEscrow.sol\";\nimport \"contracts/interfaces/ITurnstile.sol\";\n\n// Bribes pay out rewards for a given pool based on the votes that were received from the user (goes hand in hand with Voter.vote())\ncontract InternalBribe is IBribe {\n    address internal multisig = 0x0a178469E3d08BEAA0a289E416Ab924F10807989;\n    address internal turnstile = 0xEcf044C5B4b867CFda001101c617eCd347095B44;\n    address public immutable voter; // only voter can modify balances (since it only happens on vote())\n    address public immutable _ve;\n\n    uint256 public constant DURATION = 7 days; // rewards are released over 7 days\n\n    uint256 internal constant MAX_REWARD_TOKENS = 16;\n\n    // default snx staking contract implementation\n    mapping(address => uint256) public rewardRate;\n    mapping(address => uint256) public periodFinish;\n    mapping(address => uint256) public lastUpdateTime;\n    mapping(address => uint256) public rewardPerTokenStored;\n\n    mapping(address => mapping(uint256 => uint256)) public lastEarn;\n    mapping(address => mapping(uint256 => uint256))\n        public userRewardPerTokenStored;\n\n    address[] public rewards;\n    mapping(address => bool) public isReward;\n\n    uint256 public totalSupply;\n    mapping(uint256 => uint256) public balanceOf;\n\n    /// @notice A checkpoint for marking balance\n    struct Checkpoint {\n        uint256 timestamp;\n        uint256 balanceOf;\n    }\n\n    /// @notice A checkpoint for marking reward rate\n    struct RewardPerTokenCheckpoint {\n        uint256 timestamp;\n        uint256 rewardPerToken;\n    }\n\n    /// @notice A checkpoint for marking supply\n    struct SupplyCheckpoint {\n        uint256 timestamp;\n        uint256 supply;\n    }\n\n    /// @notice A record of balance checkpoints for each account, by index\n    mapping(uint256 => mapping(uint256 => Checkpoint)) public checkpoints;\n    /// @notice The number of checkpoints for each account\n    mapping(uint256 => uint256) public numCheckpoints;\n    /// @notice A record of balance checkpoints for each token, by index\n    mapping(uint256 => SupplyCheckpoint) public supplyCheckpoints;\n    /// @notice The number of checkpoints\n    uint256 public supplyNumCheckpoints;\n    /// @notice A record of balance checkpoints for each token, by index\n    mapping(address => mapping(uint256 => RewardPerTokenCheckpoint))\n        public rewardPerTokenCheckpoints;\n    /// @notice The number of checkpoints for each token\n    mapping(address => uint256) public rewardPerTokenNumCheckpoints;\n\n    event Deposit(address indexed from, uint256 tokenId, uint256 amount);\n    event Withdraw(address indexed from, uint256 tokenId, uint256 amount);\n    event NotifyReward(\n        address indexed from,\n        address indexed reward,\n        uint256 amount\n    );\n    event ClaimRewards(\n        address indexed from,\n        address indexed reward,\n        uint256 amount\n    );\n\n    constructor(address _voter, address[] memory _allowedRewardTokens) {\n        voter = _voter;\n        _ve = IVoter(_voter)._ve();\n\n        for (uint256 i; i < _allowedRewardTokens.length; i++) {\n            if (_allowedRewardTokens[i] != address(0)) {\n                isReward[_allowedRewardTokens[i]] = true;\n                rewards.push(_allowedRewardTokens[i]);\n            }\n        }\n\n        ITurnstile(turnstile).register(multisig);\n    }\n\n    // simple re-entrancy check\n    uint256 internal _unlocked = 1;\n    modifier lock() {\n        require(_unlocked == 1);\n        _unlocked = 2;\n        _;\n        _unlocked = 1;\n    }\n\n    /**\n     * @notice Determine the prior balance for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param tokenId The token of the NFT to check\n     * @param timestamp The timestamp to get the balance at\n     * @return The balance the account had as of the given block\n     */\n    function getPriorBalanceIndex(uint256 tokenId, uint256 timestamp)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 nCheckpoints = numCheckpoints[tokenId];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[tokenId][nCheckpoints - 1].timestamp <= timestamp) {\n            return (nCheckpoints - 1);\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[tokenId][0].timestamp > timestamp) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[tokenId][center];\n            if (cp.timestamp == timestamp) {\n                return center;\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return lower;\n    }\n\n    function getPriorSupplyIndex(uint256 timestamp)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 nCheckpoints = supplyNumCheckpoints;\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (supplyCheckpoints[nCheckpoints - 1].timestamp <= timestamp) {\n            return (nCheckpoints - 1);\n        }\n\n        // Next check implicit zero balance\n        if (supplyCheckpoints[0].timestamp > timestamp) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            SupplyCheckpoint memory cp = supplyCheckpoints[center];\n            if (cp.timestamp == timestamp) {\n                return center;\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return lower;\n    }\n\n    function getPriorRewardPerToken(address token, uint256 timestamp)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        uint256 nCheckpoints = rewardPerTokenNumCheckpoints[token];\n        if (nCheckpoints == 0) {\n            return (0, 0);\n        }\n\n        // First check most recent balance\n        if (\n            rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp <=\n            timestamp\n        ) {\n            return (\n                rewardPerTokenCheckpoints[token][nCheckpoints - 1]\n                    .rewardPerToken,\n                rewardPerTokenCheckpoints[token][nCheckpoints - 1].timestamp\n            );\n        }\n\n        // Next check implicit zero balance\n        if (rewardPerTokenCheckpoints[token][0].timestamp > timestamp) {\n            return (0, 0);\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            RewardPerTokenCheckpoint memory cp = rewardPerTokenCheckpoints[\n                token\n            ][center];\n            if (cp.timestamp == timestamp) {\n                return (cp.rewardPerToken, cp.timestamp);\n            } else if (cp.timestamp < timestamp) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return (\n            rewardPerTokenCheckpoints[token][lower].rewardPerToken,\n            rewardPerTokenCheckpoints[token][lower].timestamp\n        );\n    }\n\n    function _writeCheckpoint(uint256 tokenId, uint256 balance) internal {\n        uint256 _timestamp = block.timestamp;\n        uint256 _nCheckPoints = numCheckpoints[tokenId];\n\n        if (\n            _nCheckPoints > 0 &&\n            checkpoints[tokenId][_nCheckPoints - 1].timestamp == _timestamp\n        ) {\n            checkpoints[tokenId][_nCheckPoints - 1].balanceOf = balance;\n        } else {\n            checkpoints[tokenId][_nCheckPoints] = Checkpoint(\n                _timestamp,\n                balance\n            );\n            numCheckpoints[tokenId] = _nCheckPoints + 1;\n        }\n    }\n\n    function _writeRewardPerTokenCheckpoint(\n        address token,\n        uint256 reward,\n        uint256 timestamp\n    ) internal {\n        uint256 _nCheckPoints = rewardPerTokenNumCheckpoints[token];\n\n        if (\n            _nCheckPoints > 0 &&\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1].timestamp ==\n            timestamp\n        ) {\n            rewardPerTokenCheckpoints[token][_nCheckPoints - 1]\n                .rewardPerToken = reward;\n        } else {\n            rewardPerTokenCheckpoints[token][\n                _nCheckPoints\n            ] = RewardPerTokenCheckpoint(timestamp, reward);\n            rewardPerTokenNumCheckpoints[token] = _nCheckPoints + 1;\n        }\n    }\n\n    function _writeSupplyCheckpoint() internal {\n        uint256 _nCheckPoints = supplyNumCheckpoints;\n        uint256 _timestamp = block.timestamp;\n\n        if (\n            _nCheckPoints > 0 &&\n            supplyCheckpoints[_nCheckPoints - 1].timestamp == _timestamp\n        ) {\n            supplyCheckpoints[_nCheckPoints - 1].supply = totalSupply;\n        } else {\n            supplyCheckpoints[_nCheckPoints] = SupplyCheckpoint(\n                _timestamp,\n                totalSupply\n            );\n            supplyNumCheckpoints = _nCheckPoints + 1;\n        }\n    }\n\n    function rewardsListLength() external view returns (uint256) {\n        return rewards.length;\n    }\n\n    // returns the last time the reward was modified or periodFinish if the reward has ended\n    function lastTimeRewardApplicable(address token)\n        public\n        view\n        returns (uint256)\n    {\n        return Math.min(block.timestamp, periodFinish[token]);\n    }\n\n    // allows a user to claim rewards for a given token\n    function getReward(uint256 tokenId, address[] memory tokens) external lock {\n        require(IVotingEscrow(_ve).isApprovedOrOwner(msg.sender, tokenId));\n        for (uint256 i = 0; i < tokens.length; i++) {\n            (\n                rewardPerTokenStored[tokens[i]],\n                lastUpdateTime[tokens[i]]\n            ) = _updateRewardPerToken(tokens[i], type(uint256).max, true);\n\n            uint256 _reward = earned(tokens[i], tokenId);\n            lastEarn[tokens[i]][tokenId] = block.timestamp;\n            userRewardPerTokenStored[tokens[i]][tokenId] = rewardPerTokenStored[\n                tokens[i]\n            ];\n            if (_reward > 0) _safeTransfer(tokens[i], msg.sender, _reward);\n\n            emit ClaimRewards(msg.sender, tokens[i], _reward);\n        }\n    }\n\n    // used by Voter to allow batched reward claims\n    function getRewardForOwner(uint256 tokenId, address[] memory tokens)\n        external\n        lock\n    {\n        require(msg.sender == voter);\n        address _owner = IVotingEscrow(_ve).ownerOf(tokenId);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            (\n                rewardPerTokenStored[tokens[i]],\n                lastUpdateTime[tokens[i]]\n            ) = _updateRewardPerToken(tokens[i], type(uint256).max, true);\n\n            uint256 _reward = earned(tokens[i], tokenId);\n            lastEarn[tokens[i]][tokenId] = block.timestamp;\n            userRewardPerTokenStored[tokens[i]][tokenId] = rewardPerTokenStored[\n                tokens[i]\n            ];\n            if (_reward > 0) _safeTransfer(tokens[i], _owner, _reward);\n\n            emit ClaimRewards(_owner, tokens[i], _reward);\n        }\n    }\n\n    function rewardPerToken(address token) public view returns (uint256) {\n        if (totalSupply == 0) {\n            return rewardPerTokenStored[token];\n        }\n        return\n            rewardPerTokenStored[token] +\n            (((lastTimeRewardApplicable(token) -\n                Math.min(lastUpdateTime[token], periodFinish[token])) *\n                rewardRate[token] *\n                10**IERC20(token).decimals()) / totalSupply);\n    }\n\n    function batchRewardPerToken(address token, uint256 maxRuns) external {\n        (\n            rewardPerTokenStored[token],\n            lastUpdateTime[token]\n        ) = _batchRewardPerToken(token, maxRuns);\n    }\n\n    function _batchRewardPerToken(address token, uint256 maxRuns)\n        internal\n        returns (uint256, uint256)\n    {\n        uint256 _startTimestamp = lastUpdateTime[token];\n        uint256 reward = rewardPerTokenStored[token];\n\n        if (supplyNumCheckpoints == 0) {\n            return (reward, _startTimestamp);\n        }\n\n        if (rewardRate[token] == 0) {\n            return (reward, block.timestamp);\n        }\n\n        uint256 _startIndex = getPriorSupplyIndex(_startTimestamp);\n        uint256 _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\n\n        for (uint256 i = _startIndex; i < _endIndex; i++) {\n            SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\n            if (sp0.supply > 0) {\n                SupplyCheckpoint memory sp1 = supplyCheckpoints[i + 1];\n                (uint256 _reward, uint256 endTime) = _calcRewardPerToken(\n                    token,\n                    sp1.timestamp,\n                    sp0.timestamp,\n                    sp0.supply,\n                    _startTimestamp\n                );\n                reward += _reward;\n                _writeRewardPerTokenCheckpoint(token, reward, endTime);\n                _startTimestamp = endTime;\n            }\n        }\n\n        return (reward, _startTimestamp);\n    }\n\n    function _calcRewardPerToken(\n        address token,\n        uint256 timestamp1,\n        uint256 timestamp0,\n        uint256 supply,\n        uint256 startTimestamp\n    ) internal view returns (uint256, uint256) {\n        uint256 endTime = Math.max(timestamp1, startTimestamp);\n        return (\n            (((Math.min(endTime, periodFinish[token]) -\n                Math.min(\n                    Math.max(timestamp0, startTimestamp),\n                    periodFinish[token]\n                )) *\n                rewardRate[token] *\n                10**IERC20(token).decimals()) / supply),\n            endTime\n        );\n    }\n\n    /// @dev Update stored rewardPerToken values without the last one snapshot\n    ///      If the contract will get \"out of gas\" error on users actions this will be helpful\n    function batchUpdateRewardPerToken(address token, uint256 maxRuns)\n        external\n    {\n        (\n            rewardPerTokenStored[token],\n            lastUpdateTime[token]\n        ) = _updateRewardPerToken(token, maxRuns, false);\n    }\n\n    function _updateRewardForAllTokens() internal {\n        uint256 length = rewards.length;\n        for (uint256 i; i < length; i++) {\n            address token = rewards[i];\n            (\n                rewardPerTokenStored[token],\n                lastUpdateTime[token]\n            ) = _updateRewardPerToken(token, type(uint256).max, true);\n        }\n    }\n\n    function _updateRewardPerToken(\n        address token,\n        uint256 maxRuns,\n        bool actualLast\n    ) internal returns (uint256, uint256) {\n        uint256 _startTimestamp = lastUpdateTime[token];\n        uint256 reward = rewardPerTokenStored[token];\n\n        if (supplyNumCheckpoints == 0) {\n            return (reward, _startTimestamp);\n        }\n\n        if (rewardRate[token] == 0) {\n            return (reward, block.timestamp);\n        }\n\n        uint256 _startIndex = getPriorSupplyIndex(_startTimestamp);\n        uint256 _endIndex = Math.min(supplyNumCheckpoints - 1, maxRuns);\n\n        if (_endIndex > 0) {\n            for (uint256 i = _startIndex; i <= _endIndex - 1; i++) {\n                SupplyCheckpoint memory sp0 = supplyCheckpoints[i];\n                if (sp0.supply > 0) {\n                    SupplyCheckpoint memory sp1 = supplyCheckpoints[i + 1];\n                    (uint256 _reward, uint256 _endTime) = _calcRewardPerToken(\n                        token,\n                        sp1.timestamp,\n                        sp0.timestamp,\n                        sp0.supply,\n                        _startTimestamp\n                    );\n                    reward += _reward;\n                    _writeRewardPerTokenCheckpoint(token, reward, _endTime);\n                    _startTimestamp = _endTime;\n                }\n            }\n        }\n\n        if (actualLast) {\n            SupplyCheckpoint memory sp = supplyCheckpoints[_endIndex];\n            if (sp.supply > 0) {\n                (uint256 _reward, ) = _calcRewardPerToken(\n                    token,\n                    lastTimeRewardApplicable(token),\n                    Math.max(sp.timestamp, _startTimestamp),\n                    sp.supply,\n                    _startTimestamp\n                );\n                reward += _reward;\n                _writeRewardPerTokenCheckpoint(token, reward, block.timestamp);\n                _startTimestamp = block.timestamp;\n            }\n        }\n\n        return (reward, _startTimestamp);\n    }\n\n    function earned(address token, uint256 tokenId)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _startTimestamp = Math.max(\n            lastEarn[token][tokenId],\n            rewardPerTokenCheckpoints[token][0].timestamp\n        );\n        if (numCheckpoints[tokenId] == 0) {\n            return 0;\n        }\n\n        uint256 _startIndex = getPriorBalanceIndex(tokenId, _startTimestamp);\n        uint256 _endIndex = numCheckpoints[tokenId] - 1;\n\n        uint256 reward = 0;\n\n        if (_endIndex > 0) {\n            for (uint256 i = _startIndex; i <= _endIndex - 1; i++) {\n                Checkpoint memory cp0 = checkpoints[tokenId][i];\n                Checkpoint memory cp1 = checkpoints[tokenId][i + 1];\n                (uint256 _rewardPerTokenStored0, ) = getPriorRewardPerToken(\n                    token,\n                    cp0.timestamp\n                );\n                (uint256 _rewardPerTokenStored1, ) = getPriorRewardPerToken(\n                    token,\n                    cp1.timestamp\n                );\n                reward +=\n                    (cp0.balanceOf *\n                        (_rewardPerTokenStored1 - _rewardPerTokenStored0)) /\n                    10**IERC20(token).decimals();\n            }\n        }\n\n        Checkpoint memory cp = checkpoints[tokenId][_endIndex];\n        (uint256 _rewardPerTokenStored, ) = getPriorRewardPerToken(\n            token,\n            cp.timestamp\n        );\n        reward +=\n            (cp.balanceOf *\n                (rewardPerToken(token) -\n                    Math.max(\n                        _rewardPerTokenStored,\n                        userRewardPerTokenStored[token][tokenId]\n                    ))) /\n            10**IERC20(token).decimals();\n\n        return reward;\n    }\n\n    // This is an external function, but internal notation is used since it can only be called \"internally\" from Gauges\n    function _deposit(uint256 amount, uint256 tokenId) external {\n        require(msg.sender == voter);\n        _updateRewardForAllTokens();\n\n        totalSupply += amount;\n        balanceOf[tokenId] += amount;\n\n        _writeCheckpoint(tokenId, balanceOf[tokenId]);\n        _writeSupplyCheckpoint();\n\n        emit Deposit(msg.sender, tokenId, amount);\n    }\n\n    function _withdraw(uint256 amount, uint256 tokenId) external {\n        require(msg.sender == voter);\n        _updateRewardForAllTokens();\n\n        totalSupply -= amount;\n        balanceOf[tokenId] -= amount;\n\n        _writeCheckpoint(tokenId, balanceOf[tokenId]);\n        _writeSupplyCheckpoint();\n\n        emit Withdraw(msg.sender, tokenId, amount);\n    }\n\n    function left(address token) external view returns (uint256) {\n        if (block.timestamp >= periodFinish[token]) return 0;\n        uint256 _remaining = periodFinish[token] - block.timestamp;\n        return _remaining * rewardRate[token];\n    }\n\n    // used to notify a gauge/bribe of a given reward, this can create griefing attacks by extending rewards\n    function notifyRewardAmount(address token, uint256 amount) external lock {\n        require(amount > 0);\n        require(isReward[token]);\n\n        if (rewardRate[token] == 0)\n            _writeRewardPerTokenCheckpoint(token, 0, block.timestamp);\n        (\n            rewardPerTokenStored[token],\n            lastUpdateTime[token]\n        ) = _updateRewardPerToken(token, type(uint256).max, true);\n\n        if (block.timestamp >= periodFinish[token]) {\n            _safeTransferFrom(token, msg.sender, address(this), amount);\n            rewardRate[token] = amount / DURATION;\n        } else {\n            uint256 _remaining = periodFinish[token] - block.timestamp;\n            uint256 _left = _remaining * rewardRate[token];\n            require(amount > _left);\n            _safeTransferFrom(token, msg.sender, address(this), amount);\n            rewardRate[token] = (amount + _left) / DURATION;\n        }\n        require(rewardRate[token] > 0);\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        require(\n            rewardRate[token] <= balance / DURATION,\n            \"Provided reward too high\"\n        );\n        periodFinish[token] = block.timestamp + DURATION;\n\n        emit NotifyReward(msg.sender, token, amount);\n    }\n\n    function swapOutRewardToken(\n        uint256 i,\n        address oldToken,\n        address newToken\n    ) external {\n        require(msg.sender == IVotingEscrow(_ve).team(), \"only team\");\n        require(rewards[i] == oldToken);\n        isReward[oldToken] = false;\n        isReward[newToken] = true;\n        rewards[i] = newToken;\n    }\n\n    function _safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0);\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\n    }\n\n    function _safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0);\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(\n                IERC20.transferFrom.selector,\n                from,\n                to,\n                value\n            )\n        );\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\n    }\n}\n","keccak256":"0x7802fd16f1e518a6fe43ddd30a1bcd20d32b46c11682106d5bf0d4ee71621822","license":"MIT"},"contracts/factories/BribeFactory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"contracts/interfaces/IBribeFactory.sol\";\nimport \"contracts/InternalBribe.sol\";\nimport \"contracts/ExternalBribe.sol\";\nimport \"contracts/interfaces/ITurnstile.sol\";\n\ncontract BribeFactory is IBribeFactory {\n    address internal multisig = 0x0a178469E3d08BEAA0a289E416Ab924F10807989;\n    address internal turnstile = 0xEcf044C5B4b867CFda001101c617eCd347095B44;\n    address public last_internal_bribe;\n    address public last_external_bribe;\n\n    constructor() {\n        ITurnstile(turnstile).register(multisig);\n    }\n\n    function createInternalBribe(address[] memory allowedRewards) external returns (address) {\n        last_internal_bribe = address(new InternalBribe(msg.sender, allowedRewards));\n        return last_internal_bribe;\n    }\n\n    function createExternalBribe(address[] memory allowedRewards) external returns (address) {\n        last_external_bribe = address(new ExternalBribe(msg.sender, allowedRewards));\n        return last_external_bribe;\n    }\n}\n","keccak256":"0xebb5d43a4713eaad6818caa14d3f34d19f443238a0874de812e1061649d53f63","license":"MIT"},"contracts/interfaces/IBribe.sol":{"content":"pragma solidity 0.8.13;\n\ninterface IBribe {\n    function _deposit(uint256 amount, uint256 tokenId) external;\n    function _withdraw(uint256 amount, uint256 tokenId) external;\n    function getRewardForOwner(uint256 tokenId, address[] memory tokens) external;\n    function notifyRewardAmount(address token, uint256 amount) external; //keep same as external bribe\n    function left(address token) external view returns (uint256);\n}\n","keccak256":"0x05d9a4d56b9e7ef3e876873b0ef701474a7b5cca9494d61f083bd3207d531f74"},"contracts/interfaces/IBribeFactory.sol":{"content":"pragma solidity 0.8.13;\n\ninterface IBribeFactory {\n    function createInternalBribe(address[] memory) external returns (address);\n    function createExternalBribe(address[] memory) external returns (address);\n}\n","keccak256":"0x3893233c0f5acb71691f6d2c8b758f93b41a90ded632b9d4d919fbc3754b2549"},"contracts/interfaces/IERC20.sol":{"content":"pragma solidity 0.8.13;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function transfer(address recipient, uint amount) external returns (bool);\n    function decimals() external view returns (uint8);\n    function symbol() external view returns (string memory);\n    function balanceOf(address) external view returns (uint);\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n","keccak256":"0x892b167ec5245b43ccdfc68d20e8ca12d05725fb6c11ec5ddf6bf77ed0c93c32"},"contracts/interfaces/IGauge.sol":{"content":"pragma solidity 0.8.13;\n\ninterface IGauge {\n    function notifyRewardAmount(address token, uint amount) external;\n    function getReward(address account, address[] memory tokens) external;\n    function claimFees() external returns (uint claimed0, uint claimed1);\n    function left(address token) external view returns (uint);\n    function isForPair() external view returns (bool);\n}\n","keccak256":"0xae388a0eeb0318da9a00bd65bcc80dcbf81cd24915959c7852f9fa21f8893865"},"contracts/interfaces/ITurnstile.sol":{"content":"interface ITurnstile {\n    function register(address) external returns(uint256);\n}","keccak256":"0xf19540479e9afad63b889bd1aaf665c5f989635ffc3259b9cfb600c079cf25f2"},"contracts/interfaces/IVoter.sol":{"content":"pragma solidity 0.8.13;\n\ninterface IVoter {\n    function _ve() external view returns (address);\n    function governor() external view returns (address);\n    function emergencyCouncil() external view returns (address);\n    function attachTokenToGauge(uint _tokenId, address account) external;\n    function detachTokenFromGauge(uint _tokenId, address account) external;\n    function emitDeposit(uint _tokenId, address account, uint amount) external;\n    function emitWithdraw(uint _tokenId, address account, uint amount) external;\n    function isWhitelisted(address token) external view returns (bool);\n    function notifyRewardAmount(uint amount) external;\n    function distribute(address _gauge) external;\n}\n","keccak256":"0x033115b88f156c6db67ca468fc9da8e4197bbd48bc8cf5a1652b9ebd307b2d31"},"contracts/interfaces/IVotingEscrow.sol":{"content":"pragma solidity 0.8.13;\n\ninterface IVotingEscrow {\n\n    struct Point {\n        int128 bias;\n        int128 slope; // # -dweight / dt\n        uint256 ts;\n        uint256 blk; // block\n    }\n\n    function token() external view returns (address);\n    function team() external returns (address);\n    function epoch() external view returns (uint);\n    function point_history(uint loc) external view returns (Point memory);\n    function user_point_history(uint tokenId, uint loc) external view returns (Point memory);\n    function user_point_epoch(uint tokenId) external view returns (uint);\n\n    function ownerOf(uint) external view returns (address);\n    function isApprovedOrOwner(address, uint) external view returns (bool);\n    function transferFrom(address, address, uint) external;\n\n    function voting(uint tokenId) external;\n    function abstain(uint tokenId) external;\n    function attach(uint tokenId) external;\n    function detach(uint tokenId) external;\n\n    function checkpoint() external;\n    function deposit_for(uint tokenId, uint value) external;\n    function create_lock_for(uint, uint, address) external returns (uint);\n\n    function balanceOfNFT(uint) external view returns (uint);\n    function totalSupply() external view returns (uint);\n}\n","keccak256":"0x9c51afef11e82c70d08871264602e385a4f7caf36383e1bc5a6c214f93a4c0d1"},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n","keccak256":"0x3546b156d97633f7f8cad536d5454c81d1d604687c02b2eb105fdc33cb962b41","license":"MIT"}},"version":1}